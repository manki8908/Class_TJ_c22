Django
	상품관리

이미지 분석
생성모델
OpenCV
tensorflow Lite
tensorflow.js
강화학습






python manage.py startapp shop

                 서브앱    앱이름




from django.db import models

create table 앱이름_클래스이름
               테이블이름
	     shop_product (
필드명 자료형(사이즈) 제약조건
product_id int	auto_increment primary key,
product_name varchar(150) not null,

);

class Product(models.Model):
		상위클래스 , 상속
    product_id = models.AutoField(primary_key=True)
    필드명          자료형  숫자자동증가
    product_name = models.CharField(null=False, max_length=150)
			가변사이즈 문자열                     
    price = models.IntegerField(default=0)
    description = models.TextField(null=False, max_length=500)
    picture_url = models.CharField(null=True, max_length=150)


class Cart(models.Model):
    cart_id = models.AutoField(primary_key=True)
	장바구니 일련번호
    userid = models.CharField(null=False, max_length=150)
	아이디
    product_id = models.IntegerField(default=0)
	상품코드
    amount = models.IntegerField(default=0)

python manage.py makemigrations
			DB에 반영할 사항들 정리

python manage.py migrate
			DB에 반영

select * from tab;
	테이블, 뷰 목록

desc shop_product;
테이블 명세

desc shop_cart;



	api : application programming interface
		애플리케이션   프로그래밍     연결



	사용자	인터페이스		시스템
		프런트엔드		백엔드
		front end	back end

				머신러닝 모형




		urls.py		views.py	templates
		주소		함수		화면


		http://localhost/test

				def test():
					....


from django.urls import path
from shop import views

urlpatterns = [
    path('product_list', views.product_list),
		url패턴		함수
			views.py
				def product_list():
					...
	http://호스트/url패턴
		localhost/product_list
		myservice.com
	

    path('product_write', views.product_write),
    path('product_insert', views.product_insert),
    path('product_detail', views.product_detail),
    path('product_edit', views.product_edit),
    path('product_update', views.product_update),
    path('product_delete', views.product_delete),

    path('cart_insert', views.cart_insert),
    path('cart_list', views.cart_list),
    path('cart_update', views.cart_update),
    path('cart_del', views.cart_del),
    path('cart_del_all', views.cart_del_all),
]




	ipv4	142.250.206.238
	ipv6	2404:6800:400a:80e::200e


          
	DNS	Domain Name Service
		도메인   이름









	manage.py => django 










	python manage.py runserver



insert into shop_product ( product_name, price ) values ('apple',5000);
추가           테이블          필드명                        값
							'문자', 숫자


레코드 추가
select * from shop_product;
commit;
커밋 - 변경사항 확정	insert,update,delete DML Data Manipulation Language

	delete from shop_product;

	rollback




	shop
		static		원본(image, js, css)
			images
				상품이미지 저장
		
				
		templates	완성되지 않은 html
			템플릿 => 렌더링 => 완성된 html



pip install django

프로젝트 만들기
django-admin startproject config .



						urls.py					

http://127.0.0.1:8000/shop/product_list		

    path('product_list', views.product_list),



def product_list(request):
    productList = Product.objects.order_by("product_name")
		  테이블    레코드   정렬         필드명

    return render(request, "shop/product_list.html",
					템플릿 파일
                  {"productList": productList, "count": len(productList)})
			변수명      데이터
	템플릿 => 렌더링 => 완성된 html


<!DOCTYPE html>
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<title>Insert title here</title>
<script src="http://code.jquery.com/jquery-3.7.1.js"></script>
자바스크립트            로컬, 원격
<script>
	$ jQuery

	$(function(){
		자동 실행
	});

$(function(){
    $("#btnHome").click(function(){
        location.href="/";
    });
    $("#btnAdd").click(function(){

	$ jquery
	# id
	#btnAdd : id가 btnAdd인 태그
        location.href="/shop/product_write";
	주소객체   url   이동
    });
});
</script>
</head>
<body>
<h2>상품목록</h2>
<button type="button" id="btnHome">Home</button>
<button type="button" id="btnAdd">상품등록</button>
버튼                   아이디
<table border="1" width="500px">
  <tr align="center">
   <th>상품ID</th>
   <th>&nbsp;</th>
   <th>상품명</th>
   <th>가격</th>
  </tr>
{% for row in productList %}
		변수
  <tr align="center">
   <td>{{row.product_id}}</td>
   <td>
   {% if row.picture_url != "-" %}
        {% load static %}
        {% static "" as baseUrl %}
        <img src="{{baseUrl}}images/{{row.picture_url}}" width="100px" height="100px" >
   {% endif %}
   </td>
   <td>
        <a href="product_detail?product_id={{row.product_id}}">
        {{row.product_name}}</a>
        <br>
        <a href="product_edit?product_id={{row.product_id}}">[편집]</a>
    </td>
   <td>{{row.price}}</td>
  </tr>
{% endfor %}
</table>
</body>
</html>


def product_write(request):
    # if request.session.get("userid", False):
				key    default value
    #     return render(request, "shop/product_write.html")
    # else:
    #     return redirect("/member/login")
    return render(request, "shop/product_write.html")





<!DOCTYPE html>
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<title>Insert title here</title>
<script>
function product_write() {
    const product_name = document.form1.product_name.value;
 	상수		현재페이지  이름     이름           값

	const	상수
	let	변수
	var	


    const price = document.form1.price.value;
    const description = document.form1.description.value;
    if (product_name == "") {
		빈값이면
        alert("상품명을 입력하세요.");
		경고창
        document.form1.product_name.focus();
		커서 이동
        return;
    }
    if (price == "") {
        alert("가격을 입력하세요.");
        document.form1.price.focus();
        return;
    }
   if (description == "") {
        alert("상품설명을 입력하세요.");
        document.form1.description.focus();
        return;
    }
    document.form1.action = "product_insert";
		서버 주소
    document.form1.submit();
		제출
}
</script>
</head>
<body>
<h2>상품 등록</h2>

<form name="form1" method="post"
    enctype="multipart/form-data">
		파일첨부
{% csrf_token %}
<table>
    <tr>
        <td>상품명</td>
        <td><input name="product_name"></td>
			서버에 전달할 변수명
    </tr>
    <tr>
        <td>가격</td>
        <td><input name="price"></td>
    </tr>
    <tr>
        <td>상품설명</td>
        <td><textarea rows="5" cols="60" name="description"></textarea></td>
    </tr>
    <tr>
        <td>상품이미지</td>
        <td><input type="file" name="file1"></td>
    </tr>
    <tr>
        <td colspan="2" align="center">
            <input type="button" value="등록" onclick="product_write()">
					on+이벤트
            <input type="button" value="목록" onclick="location.href='/shop/product_list';">
        </td>
    </tr>
</table>
</form>
</body>
</html>



def product_insert(request):


<input type="file" name="file1">

    if "file1" in request.FILES:
			첨부파일 리스트
        file = request.FILES["file1"]
        file_name = file._name
			첨부파일 이름
        fp = open("%s%s" % (UPLOAD_DIR, file_name), "wb")
						write binary

 enctype="multipart/form-data"

        for chunk in file.chunks():
            fp.write(chunk)
        fp.close()
    else:
        file_name = "-"

    row = Product(product_name=request.POST["product_name"],
                  description=request.POST["description"],
                  price=request.POST["price"], picture_url=file_name)

    row.save()
    return redirect("/shop/product_list")



import cv2

	opencv
	Computer Vision

import numpy as np
from matplotlib import pyplot as plt
# 흑백 이미지로 로드
image = cv2.imread("d:/images/plane.jpg", cv2.IMREAD_GRAYSCALE)
	   이미지읽기                            



plt.imshow(image, cmap="gray") 
   이미지출력          
plt.axis("off")
	x,y축 off
plt.show()

	0	255
	black	white

	0.0	1.0



# 컬러로 이미지를 로드
image_bgr = cv2.imread("d:/images/plane.jpg", cv2.IMREAD_COLOR)
#image_bgr.shape
# 픽셀 확인
image_bgr
# opencv에서는 bgr color를 사용하므로 matplotlib에서 출력하려면 변환해야 함


	opencv			matplotlib
	BGR			RGB

	height,width,channel	width,height,channel
					흑백 1, 컬러 3




# BGR을 RGB로 변환
image_rgb = cv2.cvtColor(image_bgr, cv2.COLOR_BGR2RGB)
			원본		변환옵션
# 이미지를 출력
plt.imshow(image_rgb)
plt.axis("off")
plt.show()


cv2.imwrite("d:/images/plane_new.jpg", image)
		경로			데이터

image = cv2.imread("d:/images/plane_256x256.jpg", cv2.IMREAD_GRAYSCALE)
# 이미지 크기를 50x50 픽셀로 변환
image_50x50 = cv2.resize(image, (50, 50))
			원본      변경 사이즈
print(image_50x50.shape)
# 이미지를 출력
plt.imshow(image_50x50, cmap="gray")
plt.axis("off")
plt.show()





image = cv2.imread("d:/images/plane_256x256.jpg", cv2.IMREAD_GRAYSCALE)
# 열의 처음 절반과 모든 행을 선택
image_cropped = image[:,:128]
		       [행, 열]

			: => 모든행
			start:stop:step


			:128
# 이미지를 출력
plt.imshow(image_cropped, cmap="gray")
plt.show()

image = cv2.imread("d:/images/plane_256x256.jpg", cv2.IMREAD_GRAYSCALE)
# 이미지를 흐리게
# 커널 사이즈 10x10, 커널 사이즈가 클수록 이미지가 더 부드러워지게 됨
image_blurry = cv2.blur(image, (5,5))
				5x5
#image_blurry = cv2.blur(image, (10,10))
				10x10
# 이미지를 출력
plt.imshow(image_blurry, cmap="gray"), plt.axis("off")
plt.show()



# 5x5 커널
kernel = np.ones((5,5)) / 25.0
# 커널의 값을 모두 더하면 1
print(sum(kernel.flatten()))
# 커널을 확인
print(kernel)



kernel = np.array([[0, -1, 0],
                   [-1, 5,-1],
                   [0, -1, 0]])






image = cv2.imread("d:/images/plane_256x256.jpg", cv2.IMREAD_GRAYSCALE)
# 이미지 대비를 향상시킴
image_enhanced = cv2.equalizeHist(image)
			히스토그램 평탄화

	0 	255
	black	white

# 이미지를 출력
plt.imshow(image_enhanced, cmap="gray"), plt.axis("off")
plt.show()


plt.hist(image_enhanced.ravel(), 256, [0, 256])





#경계선 감지 : 경계선은 많은 정보가 담긴 영역
#정보가 적은 영역을 제거하고 대부분의 정보가 담긴 이미지 영역을 구분할 수 있음
# 흑백 이미지로 로드
image_gray = cv2.imread("d:/images/plane_256x256.jpg", cv2.IMREAD_GRAYSCALE)
# 픽셀 강도의 중간값을 계산
median_intensity = np.median(image_gray)
# 중간 픽셀 강도에서 위아래 1 표준편차 떨어진 값을 임계값으로 지정
lower_threshold = int(max(0, (1.0 - 0.33) * median_intensity))
upper_threshold = int(min(255, (1.0 + 0.33) * median_intensity))
# 경계선 감지 함수를 적용
image_canny = cv2.Canny(image_gray, lower_threshold, upper_threshold)
# 이미지를 출력
plt.imshow(image_canny, cmap="gray"), plt.axis("off")
plt.show()

value: [1.5  1.75 2.   2.25 2.5 ]
percentage: [0.15  0.175 0.2   0.225 0.25 ]
softmax: [0.11405072 0.14644403 0.18803785 0.24144538 0.31002201]

def percent(x):
    return x / np.sum(x)

def softmax(x):
    exp_x = np.exp(x)
    return exp_x / np.sum(exp_x)



value: [-2.5  -1.25  0.    1.25  2.5 ]
percentage: [-inf -inf  nan  inf  inf]
softmax: [0.00481679 0.01681225 0.05868053 0.20481518 0.71487524]

value: [0.    0.625 1.25  1.875 2.5  ]
percentage: [0.  0.1 0.2 0.3 0.4]
softmax: [0.0399012  0.07454526 0.13926888 0.26018852 0.48609615]




  current_direction = get_direction(d_error, px, cx) * learning_rate






  error.append(d_error)
  lr.append(learning_rate) #추가
  current_direction = get_direction(d_error, px, cx) * learning_rate
  nx = cx + current_direction
  ny = get_y(nx)
  display.clear_output(wait=True)
  display.display(plt.gcf())
  plt.plot(x,y)
  plt.plot([px, cx], [py, cy], 'r.-', alpha=0.5)
  plt.plot(cx, cy, 'r.')
  plt.plot([cx, nx], [cy, ny], 'g-')
  plt.plot([cx, cx], [cy, ny])
  set_title((i+2), current_direction, d_error, learning_rate)
  plt.legend(['Error', 'Previous', 'Current', 'Next'])
  plt.show(block=False)
  plt.pause(0.5)

import torch
USE_CUDA = torch.cuda.is_available()
 True/False                gpu   사용가능여부
DEVICE = torch.device("cuda" if USE_CUDA else "cpu")




train_loader = torch.utils.data.DataLoader(
    datasets.MNIST('c:/data',
			저장경로
                   train=True,
                   download=True,
                   transform=transforms.Compose([
                       transforms.RandomHorizontalFlip(),
					랜덤 가로방향 전환
                       transforms.ToTensor(),
                       # 채널별로 (평균1,평균2,평균3),(표준편차1,표준편차2,표준편차3)
                       #transforms.Normalize((0.1307,), (0.3081,))
						평균      표준편차
                   ])),

			0~255 => 



import torch.nn as nn
import torch.nn.functional as F

class Net(nn.Module):
    def __init__(self, dropout_p=0.2):
        super(Net, self).__init__()
        self.fc1 = nn.Linear(784, 256)
			     in   out
        self.fc2 = nn.Linear(256, 128)
        self.fc3 = nn.Linear(128, 10)
        self.dropout_p = dropout_p
        
    def forward(self, x):
        x = x.view(-1, 784) 1차원 픽셀 784
        x = F.relu(self.fc1(x))
        #x = F.dropout(x, training=self.training,p=self.dropout_p)
        x = F.relu(self.fc2(x))
        #x = F.dropout(x, training=self.training,p=self.dropout_p)
        x = self.fc3(x)
        return x

import torch.optim as optim

model        = Net(dropout_p=0.2).to(DEVICE)
			드롭아웃비율    cpu / gpu
optimizer    = optim.SGD(model.parameters(), lr=0.01)
		확률적 경사하강법			학습률


def train(model, train_loader, optimizer):
    model.train()
	학습모드 : 순전파+역전파
	추론모드 : 순전파
    for _, (data, target) in enumerate(train_loader):
				인덱스,데이터
        data, target = data.to(DEVICE), target.to(DEVICE)
        optimizer.zero_grad()
		경사초기화
        output = model(data)
		모델 입력
        loss = F.cross_entropy(output, target)
		
        loss.backward()	역전파 계산
        optimizer.step() 수정


def evaluate(model, test_loader):
    model.eval()
		추론모드
    test_loss = 0
    correct = 0
    with torch.no_grad():
		미분x
        for data, target in test_loader:
            data, target = data.to(DEVICE), target.to(DEVICE)
            output = model(data)
            #크로스 엔트로피 계산
            test_loss += F.cross_entropy(output, target,
                                         reduction='sum').item()
            # softmax 연산(output에서 최대값 선택)
            pred = output.max(1, keepdim=True)[1]
            correct += pred.eq(target.view_as(pred)).sum().item()
    test_loss /= len(test_loader.dataset)
    test_accuracy = 100. * correct / len(test_loader.dataset)
    return test_loss, test_accuracy




import tensorflow.keras.datasets as ds
from tensorflow.keras.preprocessing.image import ImageDataGenerator
import matplotlib.pyplot as plt
(x_train,y_train),(x_test,y_test)=ds.cifar10.load_data()
x_train=x_train.astype('float32'); x_train/=255

	0.0~1.0

x_train=x_train[0:15,]; y_train=y_train[0:15,]    
class_names=['airplane','automobile','bird','cat','deer','dog','flog','horse','ship','truck']



batch_size=4
# rotation_range 각도 범위 내에서 회전
generator=ImageDataGenerator(rotation_range=20.0,width_shift_range=0.2,height_shift_range=0.2,horizontal_flip=True)

	데이터 증강

gen=generator.flow(x_train,y_train,batch_size=batch_size)

	batch_size 메모리 용량, 속도

for a in range(3):
    img,label=gen.next()    # batch size만큼 생성
    plt.figure(figsize=(8,2.4))
    plt.suptitle("Generatior trial "+str(a+1))
    for i in range(batch_size):
        plt.subplot(1,batch_size,i+1)
        plt.imshow(img[i])
        plt.xticks([]); plt.yticks([])
        plt.title(class_names[int(label[i])])
    plt.show()



(y_train >= 7) #7,8,9




from sklearn.datasets import fetch_openml
mnist = fetch_openml('mnist_784',version=1,data_home='d:/data/mnist', as_frame=False)
mnist.data[:5]


import numpy as np
X, y = mnist["data"], mnist["target"]
y = y.astype(np.int64)
	
print(X.shape, y.shape)


(70000, 784) (70000,)
2차원		1차원


import matplotlib
import matplotlib.pyplot as plt
some_digit = X[36000]
some_digit_image = some_digit.reshape(28, 28)
plt.imshow(some_digit_image)          
plt.show()

X_train, X_test, y_train, y_test = X[:60000], X[60000:], y[:60000], y[60000:]
					start:stop


import numpy as np
shuffle_index = np.random.permutation(60000)
				비복원
X_train, y_train = X_train[shuffle_index], y_train[shuffle_index]



# 이진 분류기
y_train_5 = (y_train == 5)

	5 True
	!5 False

y_test_5 = (y_test == 5)



#확률적 경사하강법 분류모형(온라인학습)
#확률적 경사하강법(Stochastic Gradient Descent, SGD)
#무작위로 1개의 데이터를 추출하여 기울기를 계산
#빠르게 최적점을 찾을 수 있는 알고리즘
from sklearn.linear_model import SGDClassifier
sgd_clf = SGDClassifier(max_iter=500, random_state=0)
sgd_clf.fit(X_train, y_train_5)

	경사하강법
	확률적


#교차검증
from sklearn.model_selection import cross_val_score
cross_val_score(sgd_clf, X_train, y_train_5, cv=3, scoring="accuracy")



from sklearn.model_selection import StratifiedKFold
from sklearn.base import clone
#클래스 비율이 유지되는 교차검증
skfolds = StratifiedKFold(n_splits=3)

	1	2	3
0	20	20	30
1	20	20	10
	40	40	40

for train_index, test_index in skfolds.split(X_train, y_train_5):
    #분류모형을 복제(데이터는 복제하지 않음)
    clone_clf = clone(sgd_clf)
    #학습용,검증용 구분
    X_train_folds = X_train[train_index]
    y_train_folds = y_train_5[train_index]
    X_test_folds = X_train[test_index]
    y_test_folds = y_train_5[test_index]
    #학습
    clone_clf.fit(X_train_folds, y_train_folds)
    #분류
    y_pred = clone_clf.predict(X_test_folds)
    #정확도
    n_correct = sum(y_pred == y_test_folds)
    print(n_correct / len(y_pred))

#모든 예측결과를 False로 리턴하는 테스트용 클래스
from sklearn.base import BaseEstimator
class Never5Classifier(BaseEstimator):
    def fit(self, X, y=None):
        pass
    def predict(self, X):
        # 2원 영배열(행의수는 샘플개수), 0을 False로 리턴
        return np.zeros((len(X), 1), dtype=bool)



never_5_clf = Never5Classifier()
print(never_5_clf.predict(X_train))
cross_val_score(never_5_clf, X_train, y_train_5, cv=3, scoring="accuracy")
#정확도가 높음(이미지의 10%가 5이므로 5가 아니라고 분류하면 100-10=90% 정도의 정확도를 가짐)
#이 모형은 좋은 모형이 아님, 특히 불균형 데이터셋의 경우 정확도는 큰 의미가 없을 수 있음


              precision    recall  f1-score   support

       False       1.00      0.91      0.95     60000
        True       0.00      0.00      0.00         0

    accuracy                           0.91     60000
   macro avg       0.50      0.45      0.48     60000
weighted avg       1.00      0.91      0.95     60000


from sklearn.model_selection import cross_val_predict
from sklearn.metrics import confusion_matrix
y_train_pred = sgd_clf.predict(X_train)
#오차행렬
cm=confusion_matrix(y_train_5, y_train_pred)
print(cm)
tn, fp, fn, tp = cm.ravel() 1차원
print(tn, fp, fn, tp)



	precision	모형의 정확도
	recall		실제 현상


#sgd 모형의 판별 함수
y_scores = sgd_clf.decision_function([some_digit])
y_scores


#판별함수의 값 0을 기준으로 분류하는 경우
threshold = 0
y_some_digit_pred = (y_scores > threshold)
y_some_digit_pred # False로 분류됨



#예측결과가 아닌 결정점수를 리턴하는 교차검증
y_scores = cross_val_predict(sgd_clf, X_train, y_train_5, cv=3,method="decision_function")
print(y_scores)
print(y_scores.shape)  

[-66614.51306402 -16916.20960325  -3818.58305428 ... -35140.90227559
  -9169.61990934  -8926.71417691]
(60000,)


#sgd 모형과 비교하기 위하여 랜덤포레스트모형 추가
from sklearn.ensemble import RandomForestClassifier
forest_clf = RandomForestClassifier(n_estimators=10, random_state=42)
					분류기수
# predict_proba : 랜덤포레스트에서 decision_function() 대신 제공되는 함수
y_probas_forest = cross_val_predict(forest_clf, X_train, y_train_5, cv=3,method="predict_proba")








#판별함수 확인, 클래스별로 10개의 점수가 출력됨
some_digit_scores = sgd_clf.decision_function([some_digit])
print(some_digit_scores)
#가장 높은 점수 출력
print(np.argmax(some_digit_scores))
#라벨(클래스) 리스트
print(sgd_clf.classes_)
#분류한 라벨 이름
print(sgd_clf.classes_[5])




	일대일	0-1	0-2	0-3	....

	일대다	0/1~9	1 / 0,2,3,,,9


# 다중 레이블 분류
#학습시간이 오래 걸림
from sklearn.neighbors import KNeighborsClassifier
y_train_large = (y_train >= 7) #7,8,9

	0		1
	0~6		7~9


y_train_odd = (y_train % 2 == 1) #홀수
y_multilabel = np.c_[y_train_large, y_train_odd]
knn_clf = KNeighborsClassifier()
knn_clf.fit(X_train, y_multilabel)


# 특성 행렬
features = digits.data
target = digits.target
# 표준화 객체
standardizer = StandardScaler()
# 로지스틱 회귀 객체
logit = LogisticRegression()
# 표준화한 다음 로지스틱 회귀를 실행하는 파이프라인
pipeline = make_pipeline(standardizer, logit)
			스케일링		분류
# k-폴드 교차검증
kf = KFold(n_splits=10, shuffle=True, random_state=1)
		분할 10	
# k-폴드 교차검증을 수행
cv_results = cross_val_score(pipeline, # 파이프라인
                             features, # 특성 행렬
                             target, # 타깃 벡터
                             cv=kf, # 교차 검증 기법
                             scoring="accuracy", # 평가 지표
                             n_jobs=-1) # 모든 CPU 코어 사용
# 평균을 계산
cv_results.mean()






# 2. ShuffleSplit : 반복횟수에 관계없이 학습용, 검증용 데이터셋을 임의로 지정할 수 있음
# 반복마다 랜덤하게 분할하므로 하나의 샘플이 여러번 포함될 수 있음
from sklearn.model_selection import ShuffleSplit
# ShuffleSplit 분할기(학습용 50%, 검증용 20%)
ss = ShuffleSplit(n_splits=10, train_size=0.5, test_size=0.2, random_state=42)

	1000개

	100	100	...	100
train	
test


pipeline=make_pipeline(standardizer, logit)
# 교차검증을 수행
cv_results = cross_val_score(pipeline, # 파이프라인
                             features, # 특성 행렬
                             target, # 타깃 벡터
                             cv=ss, # 교차 검증 기법
                             scoring="accuracy", # 평가 지표
                             n_jobs=-1) # 모든 CPU 코어 사용
# 평균을 계산
cv_results.mean()


# 3. RepeatedKFold 교차검증
from sklearn.model_selection import RepeatedKFold
# RepeatedKFold 분할기(10회 교차검증을 5회 반복)
rk = RepeatedKFold(n_splits=10, n_repeats=5, random_state=42)


	for i in range(5):
		for j in range(10):
			

# 교차검증을 수행
cv_results = cross_val_score(pipeline, # 파이프라인
                             features, # 특성 행렬
                             target, # 타깃 벡터
                             cv=rk, # 교차 검증 기법
                             scoring="accuracy", # 평가 지표
                             n_jobs=-1) # 모든 CPU 코어 사용
# 검증 점수 개수를 확인
print(len(cv_results))
# 평균을 계산
print(cv_results.mean())



# 4. 하이퍼파라미터 값의 영향을 시각화하기
import matplotlib.pyplot as plt
import numpy as np
from sklearn.datasets import load_digits
from sklearn.ensemble import RandomForestClassifier
from sklearn.model_selection import validation_curve
# 데이터를 로드
digits = load_digits()
# 특성 행렬과 타깃 벡터
features, target = digits.data, digits.target
# 파라미터 값의 범위
param_range = np.arange(1, 250, 2)
			start,stop,step
# 파라미터 값의 범위를 사용하여 학습용 데이터셋과 검증용 데이터셋의 정확도를 계산
train_scores, test_scores = validation_curve(
    RandomForestClassifier(),
    features,
    target,
    param_name="n_estimators", 분류기
    param_range=param_range,  1,3,5,,,,,
    cv=3,
    scoring="accuracy",
    n_jobs=-1)

# 학습용 데이터셋 점수의 평균과 표준 편차를 계산
train_mean = np.mean(train_scores, axis=1)
train_std = np.std(train_scores, axis=1)
# 검증용 데이터셋 점수의 평균과 표준 편차를 계산
test_mean = np.mean(test_scores, axis=1)
test_std = np.std(test_scores, axis=1)
# 학습용 데이터셋과 검증용 데이터셋의 평균 정확도 점수
plt.plot(param_range, train_mean, label="Training score", color="black")
plt.plot(param_range, test_mean, label="Cross-validation score", color="dimgrey")
# 학습용 데이터셋과 검증용 데이터셋의 정확도에 대한 표준 편차 그래프
plt.fill_between(param_range, train_mean - train_std,
                 train_mean + train_std, color="gray")
plt.fill_between(param_range, test_mean - test_std,
                 test_mean + test_std, color="gainsboro")
# 그래프를 출력
plt.title("Validation Curve With Random Forest")
plt.xlabel("Number Of Trees")
plt.ylabel("Accuracy Score")
plt.tight_layout()
plt.legend(loc="best")
plt.show()


def shift_image(image, dx, dy):

    image = image.reshape((28, 28))

    shifted_image = shift(image, [dy, dx])

    return shifted_image.reshape([-1])


#오래 걸림
X_train_augmented = [image for image in X_train]
y_train_augmented = [label for label in y_train]
#원본 이미지 6만개 + 쉬프트 이미지 24만개 => 30만개로 증식됨
for dx, dy in ((1, 0), (-1, 0), (0, 1), (0, -1)):
    for image, label in zip(X_train, y_train):
        X_train_augmented.append(shift_image(image, dx, dy))
        y_train_augmented.append(label)
X_train_augmented = np.array(X_train_augmented)
y_train_augmented = np.array(y_train_augmented)








