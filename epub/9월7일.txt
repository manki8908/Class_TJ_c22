Django
	폼데이터 처리

OpenCV(컴퓨터비전)	

이미지 분석




	python manage.py makemigrations
	python manage.py migrate



USE pyweb;
SHOW TABLES;
SELECT * FROM mytest_salary;





<form method="post">
{% csrf_token %}
이름: <input name="name"><br>
		변수명
기본급: <input name="sal"><br>
보너스: <input name="bonus"><br>
<input type="submit" value="확인">
</form>

def salary(request):
    try:
        name = request.POST['name']
        sal = int(request.POST['sal'])
        bonus = int(request.POST['bonus'])
    except:
        return render(request, 'ch02/salary.html')
    total = sal * 12 + bonus
    tax = total * 5 / 100
    money = total - tax
    salary = Salary(name=name, sal=sal, bonus=bonus, total=total, tax=tax,
                    money=money)
    salary.save() 레코드 저장
    return render(request, 'ch02/salary_result.html',
                  {'name': name, 'sal': sal, 'bonus': bonus, 'total': total,
                   'tax': tax, 'money': money})




<a href="/salary_list">salary list</a>


def salary_list(request):
    items = Salary.objects.order_by('name')
           테이블   레코드    정렬      필드명
    return render(request, 'ch02/salary_list.html', {'items': items})


def salary_detail(request):
    item = Salary.objects.get(id=request.GET['id'])
		select * from mytest_salary where id=5

    return render(request, 'ch02/salary_detail.html', {'item': item})

def salary_update(request):
    id = request.POST['id']
    sal = int(request.POST['sal'])
    bonus = int(request.POST['bonus'])
    total = sal * 12 + bonus
    tax = total * 5 / 100
    money = total - tax
    item = Salary(id=id, name=request.POST['name'], sal=sal, bonus=bonus,
                  total=total, tax=tax, money=money)
    item.save()
    return redirect("/salary_list")


def salary_delete(request):
    Salary.objects.get(id=request.POST['id']).delete()
    return redirect('/salary_list')



	라디오		1개 선택
	체크박스		여러개 선택





<form method="post">
{% csrf_token %}
  name : <input type="text" name="name"><br>
  gender :
  <input type="radio" name="gender" value="male"> male
  <input type="radio" name="gender" value="female" checked> female
					전달값        기본값
  <input type="submit" value="OK">
</form>

def radio(request):
    try:
        name = request.POST['name']
        gender = request.POST['gender']
    except:
        return render(request, 'ch02/radio.html')
    if gender == 'male':
        gender = '남성'
    elif gender == 'female':
        gender = '여성'
    return render(request, 'ch02/radio_result.html', {'name': name, 'gender': gender})


<form method="post">
{% csrf_token %}
  choose:
  <input type="checkbox" name="fruits" value="apple" checked> apple
  <input type="checkbox" name="fruits" value="grape"> grape
  <input type="checkbox" name="fruits" value="orange"> orange
  <input type="submit" value="OK">
</form>


def checkbox(request):
    fruits = request.POST.getlist('fruits')
				리스트로 전달
    if len(fruits) == 0:
        return render(request, 'ch02/checkbox.html')
    return render(request, 'ch02/checkbox_result.html', {'fruits': fruits})

<ul>
    {% for fruit in fruits %}
	  개별         리스트
        <li>{{fruit}}</li>
    {% endfor %}
</ul>




<form name="form1" method="post">
{% csrf_token %}
    price : <input type="text" name="price"><br>
    amount : <input type="text" name="amount"><br>
    <button type="button" onclick="check()">OK</button>

	<input type="button" value="버튼1" onclick="자바스크립트함수()">
			동작x
	<input type="submit" ...> 제출버튼
	<button type="button">라벨</button> 제출기능x
	<button type="submit">라벨</button> 제출기능
</form>




ValueError at /button/
invalid literal for int() with base 10: ''


def button(request):
    try:
        price = request.POST['price']
        amount = request.POST['amount']
    except:
        return render(request, 'ch02/button.html')
    money = int(price) * int(amount)
    return render(request, 'ch02/button_result.html',
                  {'price': price, 'amount': amount, 'money': money})


function check() {
    let price = document.form1.price.value;
		문서     태그이름 이름   입력값
    let amount = document.form1.amount.value;
    if (price == "") {
        alert("Enter the price.");
        document.form1.price.focus();
        return;
    }
    if (amount == "") {
        alert("Enter the quantity.");
        document.form1.amount.focus();
        return;
    }
    document.form1.submit();
}




    <textarea name="opinion" rows="5" cols="50"
				행	열
  placeholder="Please write down your opinions.">      </textarea>
		입력 도움말
    <input type="submit" value="OK">




안녕하세요\n반가워요  

안녕하세요<br>반가워요  


def textarea(request):
    try:
        opinion = request.POST['opinion']
    except:
        return render(request, 'ch02/textarea.html')
    opinion = opinion.replace('<', '&lt;')
			     before  after
    opinion = opinion.replace('>', '&gt;')
    opinion = opinion.replace('\n', '<br>')
    opinion = opinion.replace('  ', '&nbsp;&nbsp;')
    return render(request, 'ch02/textarea_result.html', {'opinion': opinion})

 <script>location.href='http://naver.com';</script>
 &lt;script&gt;location.href='http://naver.com';&lt;/script&gt; 




opinion = opinion.replace('  ', '&nbsp;&nbsp;')

	<select name="car" size="4" multiple>
				리스트사이즈  여러개선택
    <select name="car" >
        <option value="bmw">BMW</option>
		   전달값    화면표시
        <option value="benz" selected>Benz</option>
        <option value="hyundai">Hyundai</option>
        <option value="kia">Kia</option>
    </select>

def select(request):
    if request.method == 'GET':
        return render(request, 'ch02/select.html')
    elif request.method == 'POST':
        # car = request.POST['car'] #값 1개일 때
        car = request.POST.getlist('car')  # 값 여러개일 때
        return render(request, 'ch02/select_result.html', {'car': car})



def select2(request):
    try:
        name = request.POST['name']
        color = request.POST['color']
    except:
        return render(request, 'ch02/select2.html')
    if color == 'cyan':
        color = '청록'
        bgcolor = 'cyan'
    elif color == 'green':
        color = '초록'
        bgcolor = 'green'
    elif color == 'yellow':
        color = '노랑'
        bgcolor = 'yellow'
    return render(request, 'ch02/select2_result.html',
                  {'name': name, 'color': color, 'bgcolor': bgcolor})



<body bgcolor="{{bgcolor}}">

	문서의 배경색상


# 픽셀값 127을 기준으로 0,255로 나누는 작업
# 127보다 작으면 0, 크면 255
ret, dst = cv2.threshold(image_rgb, 127, 255, cv2.THRESH_BINARY)
			            기준  최대
print(image_rgb[0][:5]) #원본
print(ret) #경계값
print(dst[0][:5]) #출력값




gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)
#adaptiveThreshold(입력이미지, 최대값, 적응형 이진화 플래그, 임계값 형식, 블록 크기, 감산값)
# blockSize – thresholding을 적용할 영역 사이즈, 홀수(3, 5, 7, ...)
# 감산값(C) – 계산된 경계값(평균이나 가중평균)에서 차감할 값
#cv2.ADAPTIVE_THRESH_MEAN_C    : 모든 픽셀에 평균 가중치 적용
#cv2.ADAPTIVE_THRESH_GAUSSIAN_C    : 모든 픽셀에 중심점으로부터의 거리에 대한 가중치 적용
#binary = cv2.adaptiveThreshold(gray, 255, cv2.ADAPTIVE_THRESH_MEAN_C, cv2.THRESH_BINARY, 467, 37)
binary = cv2.adaptiveThreshold(gray, 255, cv2.ADAPTIVE_THRESH_GAUSSIAN_C, cv2.THRESH_BINARY, 467, 37)




import cv2
import numpy as np

def onChangeBlue(pos):
    global b
	전역변수
    b = pos
    cv2.imshow("Palette", createImage(b, g, r))

def createImage(b, g, r):
    return np.full((500, 500, 3), (b, g, r), dtype=np.uint8)

b, g, r = 0, 0, 0
cv2.namedWindow("Palette")
	윈도우 타이틀
cv2.createTrackbar("Blue", "Palette", 55, 255, onChangeBlue)
						함수
cv2.createTrackbar("Green", "Palette", 0, 255, lambda x:x)
cv2.createTrackbar("Red", "Palette", 0, 255, lambda x:x)
while True:
	무한반복
    g = cv2.getTrackbarPos("Green", "Palette")
    r = cv2.getTrackbarPos("Red", "Palette")
    
    cv2.imshow("Palette", createImage(b, g, r))
    if cv2.waitKey(33) & 0xFF == ord('q'):
				문자코드
        break
    
cv2.destroyAllWindows()


import cv2
def on_trackbar(pos):
		트랙바 좌표
    bsize = pos
    if bsize % 2 == 0: bsize = bsize - 1
    if bsize < 3: bsize = 3
    #적응형 이진화(가우시안 블러를 적용하여 노이즈를 제거한 후 이진화 처리)
    dst = cv2.adaptiveThreshold(src, 255, cv2.ADAPTIVE_THRESH_GAUSSIAN_C,
                               cv2.THRESH_BINARY, bsize, 5)
    cv2.imshow('dst', dst)
    
src = cv2.imread('d:/images/sudoku.jpg', cv2.IMREAD_GRAYSCALE)
cv2.imshow('src', src)
cv2.namedWindow('dst')
cv2.createTrackbar('Block Size', 'dst', 0, 200, on_trackbar)
					
cv2.setTrackbarPos('Block Size', 'dst', 11)
cv2.waitKey()
cv2.destroyAllWindows()


out = gray.copy()
	이미지 복사
height, width = gray.shape

print(height,width)

	150~160 => 255

	0	255
	black	white

low = 150
high = 160
print(out[50][:30])
for row in range(height):
    for col in range(width):
        if low <= out[row][col] <= high:
            out[row][col] = 255
print(out[50][:30]) 













	이벤트 처리

	사용자 요청 => 시스템 응답





# 밝게 하는 경우
low = 75
high = 255
low, high
for i in range(height):
    for j in range(width):
        out[i][j] = ((gray[i][j] - low) * 255 / (high - low))


plt.figure(figsize=(12,6))
plt.subplot(1, 2, 1)
plt.hist(gray.ravel(), 256, [0, 256])
plt.subplot(1, 2, 2)
plt.hist(out.ravel(), 256, [0, 256])
plt.show()
#픽셀에 대한 히스토그램, 밝기에 해당하는 명도값
#왼쪽으로 치우쳐 있으면 명암대비가 낮은 이미지, 오른쪽으로 치우쳐 있으면 명암대비가 높은 이미지



(384, 640)

# 밝게 하는 경우
low = 75
high = 255
low, high
for i in range(height):
		384
    for j in range(width):
			640
           # 명도값 = ((원래값 - 최저명도값) * 255) / (최고명도값 - 최저명도값)
        out[i][j] = ((gray[i][j] - low) * 255 / (high - low))
            0
            1
	.....
	   383



from tensorflow.keras.applications.vgg19 import VGG19
# VGG19 모델
# 1. 전이학습
base_model = VGG19(
    weights="imagenet",  
    input_shape=(96, 96, 3),
    include_top=False, 
)

model = VGG19(input_shape=(96, 96, 3), include_top=False, weights='imagenet')
					out layer 제외
model.trainable = False
	추론모드
t_model = tf.keras.models.Sequential([
    model,
    tf.keras.layers.GlobalAveragePooling2D(),
    tf.keras.layers.Dense(128, activation='relu'),
    tf.keras.layers.Dense(6, activation='softmax')
])

t_model.compile(optimizer=tf.keras.optimizers.Adam(lr=0.001),
                loss='categorical_crossentropy',
                metrics='accuracy')
t_model.summary()                



Total params: 20,090,822
Trainable params: 66,438
Non-trainable params: 20,024,384



# Fine-Tuning
t_model.trainable = True
t_model.compile(optimizer=tf.keras.optimizers.Adam(lr=0.0001),
                loss='categorical_crossentropy',
                metrics='accuracy')
t_model.summary()


# cnn 60%
# transfer learning 69%
# fine tuning 85%



RESOURCE_EXHAUSTED: failed to allocate memory
[2023-09-07 12:49:52,585] ERROR in app: Exception on /uploader [POST]





def upload_image():
    model = load_model('d:/data/models/food_best2.h5')
    img = Image.open(request.files['file'].stream)
    img = img.resize((96, 96))
    arr = np.array(img) / 255
    arr = arr.reshape(1, 96, 96, 3)
    menu_items = ['치킨', '돌솥비빔밥', '제육볶음', '김치', '삼겹살', '된장찌게']
    with tf.device('/CPU:0'):
        pred = model.predict(arr)
        num = np.argmax(pred, axis=1)
    return '메뉴:' + menu_items[num[0]]





	pip uninstall tensorflow
	pip uninsatll tensorflow-gpu
	pip uninstall keras

	pip install tensorflow-gpu==2.10.0



https://developer.nvidia.com/rdp/cudnn-archive
Download cuDNN v8.6.0 (October 3rd, 2022), for CUDA 11.x
압축 해제 후 C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v11.7 디렉토리에 붙여넣기(덮어쓰기)












import glob
from PIL import Image
import numpy as np
import glob
all_images=[]
all_labels=[]
filenames=[]
ages=[]
img_size=(80,100)
for f in glob.glob('d:\\data\\xray\\**\\*.jpg', recursive=True):
    arr=f.split('\\')
    arr2=arr[3].split("_")
    if arr2[1]=='M':
        img = Image.open(f)
        filenames.append(arr[-1])
        img_resize = img.resize((img_size[0], img_size[1]))
        all_images.append(img_resize)
        age=int(arr2[2].replace('yr',''))
        ages.append(age)

'd:\\data\\xray\\BA_F_10yr\\332_F.jpg',   10
 0      1   2          3         4


	BA_F_10yr
        0  1  2




from keras.models import Sequential
from keras.layers import Conv2D, MaxPooling2D, Dense, Flatten
model=Sequential()
model.add(Conv2D(64,(3,3),padding="same", input_shape=X_train.shape[1:],activation='relu'))
model.add(MaxPooling2D(2,2))
model.add(Conv2D(64,(3,3),activation="relu"))
model.add(MaxPooling2D(2,2))
model.add(Conv2D(64,(3,3),activation="relu"))
model.add(Flatten())
model.add(Dense(64,activation="relu"))
model.add(Dense(1,activation='linear'))    
		output , 회귀분석      
model.compile(optimizer="rmsprop", loss="mae",metrics=["mae"])
					평균절대오차
model.summary()




    <form action = "uploader" method = "post" enctype = "multipart/form-data">
      <input type="radio" name="gender" value="M">남
      <input type="radio" name="gender" value="F">여
      <input type = "file" name = "file" >
      <input type = "submit" value="확인">
    </form>


@app.route('/uploader', methods=['POST'])
def upload_image():
    gender = request.form['gender']
    if gender == 'M':
        model = load_model('d:/data/models/xray_m_best.h5')
    elif gender == 'F':
        model = load_model('d:/data/models/xray_f_best.h5')
    img = Image.open(request.files['file'].stream)
    img = img.resize((80, 100))
    arr = np.array(img) / 255
    arr = arr.reshape(1, 80, 100, 3)
    with tf.device('/CPU:0'):
        pred = model.predict(arr)
    return '연령:' + str(pred[0][0])


model.add(Dense(1, activation = None))
			       linear  회귀분석




import glob
from PIL import Image
import glob
all_images=[]
img_size=(32,20)
labels=[]
for f in glob.glob('d:\\data\\power\\**\\*.jpg', recursive=True):
    arr=f.split('\\')
    img = Image.open(f)
    img_resize = img.resize((img_size[0], img_size[1]))
    all_images.append(img_resize)
    label=float(arr[3])
    labels.append(label)


'd:\\data\\power\\0.0\\0-1.jpg',
 0   1      2     3     4



for f in glob.glob('d:\\data\\power\\**\\*.jpg', recursive=True):
    arr=f.split('\\')
    img = Image.open(f)
    img_resize = img.resize((img_size[0], img_size[1]))
    all_images.append(img_resize)
    label=float(arr[3])
    labels.append(label)


#오래걸림
X=np.empty((1,img_size[0],img_size[1],3))
for img in all_images:
    X=np.vstack((X,np.array(img).reshape(1,img_size[0],img_size[1],3)))

X.shape   


X = np.delete(X, (0), axis=0)


model.add(Dropout(0.4))
model.add(Dense(1, activation = None))
model.compile(loss='mae', optimizer="rmsprop", metrics = ["mae"])
model.summary()



from keras.callbacks import ModelCheckpoint
checkpoint = ModelCheckpoint("d:/data/models/power_best.h5", monitor='val_loss', verbose=1, save_best_only=True, mode='min')
hist = model.fit(X_train, y_train, batch_size=32, validation_split=0.2, epochs=40, callbacks=[checkpoint])




_, inverse = np.unique(labels, return_inverse=True)
data_bincount = np.bincount(inverse)
		0.0 0.1
plt.figure(figsize=(20,5))
plt.bar(np.arange (0, 10, 0.1), data_bincount, width=0.09, align='center')
plt.ylabel('count')
plt.xlabel('digit class')
plt.xticks(np.arange(0, 10, 0.1))
plt.show()




a=['a','b','c','b','c']
    0   1   2   1   2
np.unique(a, return_inverse=True)

(array(['a', 'b', 'c'], dtype='<U1'), array([0, 1, 2, 1, 2], dtype=int64))
         0    1   2
	중복값 제거                             










@app.route('/uploader', methods=['POST'])
def upload_image():
    model = load_model('d:/data/models/power_best.h5')
    img = Image.open(request.files['file'].stream)
    img = img.resize((32, 20))
    arr = np.array(img) / 255
    arr = arr.reshape(1, 32, 20, 3)
    with tf.device('/CPU:0'):
        pred = model.predict(arr)
    return '숫자:' + str(pred[0][0])




html_code = f'''

<div style="background-color:white; border-radius:2px; border:#000000 solid; padding: 15px; font-size:100%; text-align:center;">

    <img src="data:image/png;base64,{img_base64}" style="display: block; margin: 0 auto;">

</div>

'''

display(HTML(html_code))











